openapi: 3.0.0
info:
  title: 'Symfony 6 RESTApi'
  description: 'Example to show how OpenAPI works in SF'
  version: 1.0.0
paths:
  /api/login_check:
    post:
      tags:
        - Auth
      summary: 'Obtain JWT token'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: crtanase
                password:
                  type: string
                  example: mysecretpassword2025
              type: object
      responses:
        '200':
          description: 'JWT token response'
          content:
            application/json:
              schema:
                properties:
                  token: { type: string, example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... }
                type: object
        '401':
          description: 'Invalid credentials'
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /api/messages/dispatch:
    post:
      tags:
        - Message
      operationId: post_api_messages_dispatch_agent_question
      requestBody:
        description: 'Dispatch a question to our LangChain agent'
        required: true
        content:
          application/json:
            schema:
              required:
                - query
              properties:
                query:
                  type: string
                  example: 'Where is Bucharest located on the globe'
              type: object
      responses:
        '200':
          description: 'Message dispatched successfully'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'Message dispatched successfully' }
                  time: { type: string, format: date-time }
                type: object
  /api/messages/dispatch/example:
    post:
      tags:
        - Message
      operationId: post_api_messages_dispatch_example
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - content
              properties:
                content:
                  type: string
                  example: 'Hello from the message controller. This will dispatch an ExampleMessage.'
              type: object
      responses:
        '200':
          description: 'Message dispatched successfully'
          content:
            application/json:
              schema:
                properties:
                  status: { type: string, example: 'Message dispatched successfully' }
                  time: { type: string, format: date-time }
                type: object
  '/api/user/{id}':
    get:
      tags:
        - Users
      operationId: get_api_user_get
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: ''
      security:
        -
          Bearer: []
  /api/user:
    get:
      tags:
        - Users
      operationId: get_api_user_list
      parameters:
        -
          name: page
          in: query
          description: 'Page number (default: 1)'
          required: false
          schema:
            type: integer
            default: 1
        -
          name: limit
          in: query
          description: 'Number of users per page (default: 10, max: 100)'
          required: false
          schema:
            type: integer
            default: 10
            maximum: 100
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                properties:
                  page: { type: integer, example: 1 }
                  limit: { type: integer, example: 10 }
                  total: { type: integer, example: 100 }
                  users: { type: array, items: { properties: { id: { type: integer, example: 1 }, username: { type: string, example: crtanase }, email: { type: string, format: email, example: cosmin@tanase.dev } }, type: object } }
                type: object
    post:
      tags:
        - Users
      operationId: post_api_user_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - username
                - password
              properties:
                name:
                  type: string
                  example: 'Cosmin Romeo TANASE'
                email:
                  type: string
                  format: email
                  example: cosmin@tanase.dev
                username:
                  type: string
                  example: crtanase
                password:
                  type: string
                  format: password
                  example: mysecretpassword2025
              type: object
      responses:
        '201':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                properties:
                  id: { type: integer, example: 1 }
                  name: { type: string, example: crtanase }
                  email: { type: string, format: email, example: cosmin@tanase.dev }
                type: object
        '400':
          description: 'Missing required fields'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'Missing required fields' }
                type: object
        '500':
          description: 'Failed to create user'
          content:
            application/json:
              schema:
                properties:
                  error: { type: string, example: 'Failed to create user' }
                type: object
components:
  examples:
    UserExample:
      summary: 'Example user'
      value:
        id: 1
        name: 'Cosmin Romeo TANASE'
        email: cosmin@tanase.dev
  securitySchemes:
    Bearer:
      type: http
      bearerFormat: JWT
      scheme: bearer
security:
  -
    Bearer: []
tags:
  -
    name: Message
  -
    name: Users
  -
    name: Auth
    description: Auth

